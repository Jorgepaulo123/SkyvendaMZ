import { ClipboardList, Eye, Grid, Heart, Info, MessageCircle, MoreHorizontal, Settings, User2, UserCheck, UserPlus } from 'lucide-react';
import React, { useContext, useEffect, useState } from 'react'
import { Link, useLocation, useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import { useWebSocket } from '../../context/websoketContext';
import api from '../../api/api';
import { HomeContext } from '../../context/HomeContext';
import { base_url } from '../../api/api';
import toast from 'react-hot-toast';

export default function Profile() {
    // Estados
    const [hasProfile, setHasProfile] = useState(false);
    const [isMyProfile, setIsMyProfile] = useState(false);
    const [userProfile, setUserProfile] = useState(null);
    const [tabSelected, setTabSelected] = useState('posts');
    const [loading, setLoading] = useState(true);
    const [products, setProducts] = useState([]);
    const [loadingProducts, setLoadingproducts] = useState(true);
    const [isPublic, setIsPublic] = useState(false);
    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });
    const [showTooltip, setShowTooltip] = useState(false);
    const [openAvatarMenu, setOpenAvatarMenu] = useState(false);
    const [fileImage, setFileImage] = useState(null);
    const [message, setMessage] = useState('');
    const [previewImage, setPreviewImage] = useState(null);
    const [uploading, setUploading] = useState(false);
    const [followLoading, setFollowLoading] = useState(false); // Estado para controlar a animação do botão de seguir
    
    // Hooks
    const { setChats, setSelectedUser } = useWebSocket();
    
    // Função para abrir o chat com o usuário
    const handleOpenChat = (user) => {
        if (!user || !user.id) {
            toast.error('Não foi possível abrir o chat com este usuário');
            return;
        }
        
        // Criar um objeto de chat com as informações do usuário
        const chatUser = {
            id: user.id,
            nome: user.nome || user.name,
            username: user.username,
            foto: user.foto_perfil || user.perfil,
            mensagens: []
        };
        
        // Atualizar o estado do chat no contexto do WebSocket
        setSelectedUser(chatUser);
        
        // Adicionar o chat à lista de chats se ainda não existir
        setChats(prevChats => {
            // Verificar se já existe um chat com este usuário
            const existingChatIndex = prevChats.findIndex(chat => String(chat.id) === String(user.id));
            
            if (existingChatIndex !== -1) {
                // Se já existe, colocar no topo da lista
                const existingChat = prevChats[existingChatIndex];
                const updatedChats = prevChats.filter((_, i) => i !== existingChatIndex);
                return [existingChat, ...updatedChats];
            } else {
                // Se não existe, adicionar ao topo da lista
                return [chatUser, ...prevChats];
            }
        });
        
        // Navegar para a página de chat
        navigate('/chat');
        toast.success(`Abrindo chat com ${user.username}`);
    };
    const { user, token } = useAuth();
    const { username } = useParams();
    const location = useLocation();
    const navigate = useNavigate();
    const { myproducts, addProducts } = useContext(HomeContext);

    const handleMouseMove = (e) => {
        setTooltipPosition({
        x: e.clientX + 10, // Offset by 10px to not overlap with cursor
        y: e.clientY + 10
        });
    };
  
    // Função para carregar o perfil
    const carregarPerfil = async () => {
        try {
            // Verificar se é o próprio perfil do usuário
            if (user && user.username === username) {
                console.log('Carregando perfil próprio:', username);
                setIsMyProfile(true);
                setHasProfile(true);
                setUserProfile(user);
                
                // Carregar produtos do usuário
                try {
                    const response = await api.get(`/usuario/${username}/produtos`);
                    if (response.data && response.data.produtos) {
                        setProducts(response.data.produtos);
                    }
                } catch (error) {
                    console.error('Erro ao carregar produtos:', error);
                }
            } else {
                // Carregar perfil de outro usuário
                console.log('Carregando perfil de outro usuário:', username);
                try {
                    const response = await api.get(`/usuario/${username}`);
                    if (response.data && response.data.usuario) {
                        setUserProfile(response.data.usuario);
                        setHasProfile(true);
                        setIsPublic(response.data.usuario.is_public);
                        
                        // Carregar produtos do usuário
                        try {
                            const productsResponse = await api.get(`/usuario/${username}/produtos`);
                            if (productsResponse.data && productsResponse.data.produtos) {
                                setProducts(productsResponse.data.produtos);
                            }
                        } catch (error) {
                            console.error('Erro ao carregar produtos:', error);
                        }
                    } else {
                        setHasProfile(false);
                    }
                } catch (error) {
                    console.error('Erro ao carregar perfil:', error);
                    setHasProfile(false);
                }
            }
        } catch (error) {
            console.error('Erro ao carregar perfil:', error);
        } finally {
            setLoading(false);
            setLoadingproducts(false);
        }
    };
    
    // Efeito para carregar o perfil do usuário
    useEffect(() => {
        // Scroll to top when component mounts
        window.scrollTo(0, 0);
        
        // Resetar estados ao mudar de perfil
        setLoading(true);
        setLoadingproducts(true);
        setHasProfile(false);
        setIsMyProfile(false);
        setIsPublic(false);
        setProducts([]);
        
        carregarPerfil();
        
        // Definir a imagem de perfil para pré-visualização
        if (user?.perfil) {
            setPreviewImage(user.perfil);
        }
    }, [username, user]);

    // Componente para o menu de avatar
    const AvatarMenu = () => {
        // Função para carregar uma nova imagem de perfil
        const handleFileChange = (e) => {
            const file = e.target.files[0];
            if (file) {
                setFileImage(file);
                const reader = new FileReader();
                reader.onloadend = () => {
                    setPreviewImage(reader.result);
                };
                reader.readAsDataURL(file);
            }
        };
        
        // Função para salvar a nova imagem de perfil
        const handleSaveImage = async () => {
            if (!fileImage) {
                setMessage('Selecione uma imagem para continuar');
                return;
            }
            
            setUploading(true);
            
            try {
                const formData = new FormData();
                formData.append('file', fileImage);
                
                const response = await api.post('/usuario/perfil', formData, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'multipart/form-data'
                    }
                });
                
                if (response.status === 200) {
                    setMessage('Imagem de perfil atualizada com sucesso!');
                    // Atualizar a imagem de perfil no contexto do usuário
                    // (isso vai depender de como você gerencia o estado do usuário)
                    
                    // Fechar o menu
                    setTimeout(() => {
                        setOpenAvatarMenu(false);
                    }, 1500);
                } else {
                    setMessage('Erro ao atualizar a imagem de perfil. Tente novamente.');
                }
            } catch (error) {
                console.error('Erro ao enviar imagem:', error);
                setMessage('Erro ao enviar a imagem. Tente novamente.');
            } finally {
                setUploading(false);
            }
        };
        
        return (
            <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center">
                <div className="bg-white rounded-lg p-6 w-full max-w-md">
                    <h2 className="text-xl font-bold mb-4">Atualizar foto de perfil</h2>
                    
                    <div className="mb-4 flex justify-center">
                        <img 
                            src={previewImage || (user && user.perfil) || 'https://via.placeholder.com/150'} 
                            className="w-32 h-32 rounded-full object-cover border-2 border-gray-300"
                            alt="Preview da foto de perfil"
                        />
                    </div>
                    
                    <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                            Selecione uma nova foto
                        </label>
                        <input 
                            type="file" 
                            accept="image/*"
                            onChange={handleFileChange}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                        />
                    </div>
                    
                    {message && (
                        <div className={`p-2 mb-4 rounded-md ${message.includes('sucesso') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                            {message}
                        </div>
                    )}
                    
                    <div className="flex justify-end space-x-2">
                        <button
                            onClick={() => setOpenAvatarMenu(false)}
                            className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
                        >
                            Cancelar
                        </button>
                        <button
                            onClick={handleSaveImage}
                            disabled={uploading}
                            className={`px-4 py-2 rounded-md text-sm font-medium text-white ${
                                uploading ? 'bg-indigo-400' : 'bg-indigo-600 hover:bg-indigo-700'
                            }`}
                        >
                            {uploading ? 'Salvando...' : 'Salvar'}
                        </button>
                    </div>
                </div>
            </div>
        );
    };

    // Renderização do componente
    return (
        <div className="min-h-screen bg-gray-50">
            {loading ? (
                <div className="flex items-center justify-center min-h-screen">
                    <p className="text-lg text-gray-500">🔄 Carregando...</p>
                </div>
            ) : (
                hasProfile ? (
                    <div className="container min-h-screen px-2 sm:px-4 lg:px-[140px] pb-[100px]">
                        {/* Cabeçalho do perfil */}
                        <div className="bg-white shadow rounded-lg mt-6">
                            <div className="p-4 sm:p-6">
                                <div className="flex flex-col md:flex-row items-center md:items-start">
                                    {/* Foto de perfil */}
                                    <div className="relative mb-4 md:mb-0 md:mr-6">
                                        <div className="absolute -z-10 w-[120px] h-[120px] md:w-[155px] md:h-[155px] rounded-full bg-gradient-to-tr from-purple-500 via-pink-500 to-yellow-400" />
                                        
                                        <div className="relative">
                                            <img 
                                                src={previewImage}
                                                className="rounded-full border w-[115px] h-[115px] md:w-[150px] md:h-[150px]"
                                                alt="Profile"
                                                onMouseMove={handleMouseMove}
                                                onMouseEnter={() => setShowTooltip(true)}
                                                onMouseLeave={() => setShowTooltip(false)}
                                                onClick={()=>setOpenAvatarMenu(true)}
                                            />
                                            
                                            {showTooltip && (
                                                <div
                                                    className="fixed z-50 bg-black text-white px-3 py-1 rounded-md pointer-events-none text-xs"
                                                    style={{
                                                        left: `${tooltipPosition.x}px`,
                                                        top: `${tooltipPosition.y}px`,
                                                    }}
                                                >
                                                    Mudar a foto do perfil
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                    
                                    {/* Informações do perfil */}
                                    <div className="flex-1 text-center md:text-left">
                                        <div className="flex flex-col md:flex-row md:items-center justify-between mb-2">
                                            <h1 className="text-2xl font-bold">{userProfile?.nome}</h1>
                                            
                                            {/* Botões de ação */}
                                            <div className="flex justify-center md:justify-start space-x-2 mt-2 md:mt-0">
                                                {isMyProfile ? (
                                                    <>
                                                        <Link to="/configuracoes" className="flex items-center space-x-1 px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full text-sm">
                                                            <Settings size={16} />
                                                            <span>Editar perfil</span>
                                                        </Link>
                                                    </>
                                                ) : (
                                                    <>
                                                        <button 
                                                            className="flex items-center space-x-1 px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded-full text-sm"
                                                            onClick={() => handleOpenChat(userProfile)}
                                                        >
                                                            <MessageCircle size={16} />
                                                            <span>Mensagem</span>
                                                        </button>
                                                    </>
                                                )}
                                            </div>
                                        </div>
                                        
                                        <div className="text-gray-600 mb-2">@{userProfile?.username}</div>
                                        
                                        {/* Estatísticas */}
                                        <div className="flex justify-center md:justify-start space-x-4 my-3">
                                            <div className="text-center">
                                                <div className="font-semibold">{products?.length || 0}</div>
                                                <div className="text-xs text-gray-500">Produtos</div>
                                            </div>
                                            <div className="text-center">
                                                <div className="font-semibold">{userProfile?.seguidores?.length || 0}</div>
                                                <div className="text-xs text-gray-500">Seguidores</div>
                                            </div>
                                            <div className="text-center">
                                                <div className="font-semibold">{userProfile?.seguindo?.length || 0}</div>
                                                <div className="text-xs text-gray-500">Seguindo</div>
                                            </div>
                                        </div>
                                        
                                        {/* Bio do usuário */}
                                        {userProfile?.bio && (
                                            <div className="mt-2 text-sm text-gray-700">{userProfile.bio}</div>
                                        )}
                                    </div>
                                </div>
                            </div>
                            
                            {/* Abas de navegação */}
                            <div className="border-t">
                                <div className="flex overflow-x-auto">
                                    <button 
                                        className={`flex items-center space-x-1 px-4 py-3 border-b-2 ${tabSelected === 'posts' ? 'border-blue-500 text-blue-500' : 'border-transparent'}`}
                                        onClick={() => setTabSelected('posts')}
                                    >
                                        <Grid size={18} />
                                        <span>Posts</span>
                                    </button>
                                    <button 
                                        className={`flex items-center space-x-1 px-4 py-3 border-b-2 ${tabSelected === 'produtos' ? 'border-blue-500 text-blue-500' : 'border-transparent'}`}
                                        onClick={() => setTabSelected('produtos')}
                                    >
                                        <ClipboardList size={18} />
                                        <span>Produtos</span>
                                    </button>
                                    <button 
                                        className={`flex items-center space-x-1 px-4 py-3 border-b-2 ${tabSelected === 'sobre' ? 'border-blue-500 text-blue-500' : 'border-transparent'}`}
                                        onClick={() => setTabSelected('sobre')}
                                    >
                                        <Info size={18} />
                                        <span>Sobre</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        {/* Conteúdo da aba selecionada */}
                        <div className="mt-6">
                            {tabSelected === 'posts' && (
                                <div className="bg-white shadow rounded-lg p-4">
                                    <h2 className="text-xl font-semibold mb-4">Publicações</h2>
                                    <p className="text-gray-500">Esta funcionalidade estará disponível em breve.</p>
                                </div>
                            )}
                            
                            {tabSelected === 'produtos' && (
                                <div className="bg-white shadow rounded-lg p-4">
                                    <h2 className="text-xl font-semibold mb-4">Produtos</h2>
                                    
                                    {loadingProducts ? (
                                        <div className="flex justify-center py-8">
                                            <p className="text-gray-500">Carregando produtos...</p>
                                        </div>
                                    ) : products && products.length > 0 ? (
                                        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                                            {products.map((produto) => (
                                                <Link to={`/produtos/${produto.id}`} key={produto.id} className="block">
                                                    <div className="bg-white border rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                                                        <div className="relative pb-[100%] bg-gray-100">
                                                            <img 
                                                                src={produto.imagens && produto.imagens.length > 0 ? produto.imagens[0] : 'https://via.placeholder.com/150'} 
                                                                alt={produto.nome}
                                                                className="absolute inset-0 w-full h-full object-cover"
                                                            />
                                                        </div>
                                                        <div className="p-2">
                                                            <h3 className="text-sm font-medium truncate">{produto.nome}</h3>
                                                            <p className="text-sm font-bold text-gray-900 mt-1">{Number(produto.preco).toLocaleString('pt-MZ', { style: 'currency', currency: 'MZN' })}</p>
                                                        </div>
                                                    </div>
                                                </Link>
                                            ))}
                                        </div>
                                    ) : (
                                        <div className="text-center py-8">
                                            <p className="text-gray-500">Nenhum produto encontrado.</p>
                                        </div>
                                    )}
                                </div>
                            )}
                            
                            {tabSelected === 'sobre' && (
                                <div className="bg-white shadow rounded-lg p-4">
                                    <h2 className="text-xl font-semibold mb-4">Sobre</h2>
                                    
                                    <div className="space-y-4">
                                        <div>
                                            <h3 className="font-medium text-gray-900">Bio</h3>
                                            <p className="text-gray-700 mt-1">{userProfile?.bio || 'Nenhuma biografia definida.'}</p>
                                        </div>
                                        
                                        <div>
                                            <h3 className="font-medium text-gray-900">Informações do perfil</h3>
                                            <div className="mt-2 space-y-2">
                                                <div className="flex">
                                                    <span className="w-32 text-gray-500">Nome:</span>
                                                    <span className="flex-1 text-gray-900">{userProfile?.nome}</span>
                                                </div>
                                                <div className="flex">
                                                    <span className="w-32 text-gray-500">Username:</span>
                                                    <span className="flex-1 text-gray-900">@{userProfile?.username}</span>
                                                </div>
                                                <div className="flex">
                                                    <span className="w-32 text-gray-500">Email:</span>
                                                    <span className="flex-1 text-gray-900">{isMyProfile ? userProfile?.email : 'Privado'}</span>
                                                </div>
                                                <div className="flex">
                                                    <span className="w-32 text-gray-500">Membro desde:</span>
                                                    <span className="flex-1 text-gray-900">
                                                        {userProfile?.data_criacao 
                                                            ? new Date(userProfile.data_criacao).toLocaleDateString('pt-BR', {
                                                                day: 'numeric',
                                                                month: 'long',
                                                                year: 'numeric'
                                                            })
                                                            : 'Não disponível'}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                ) : (
                    <div className="container min-h-screen px-2 sm:px-4 lg:px-[140px] pb-[100px]">
                        <div className="flex items-center justify-center min-h-screen">
                            <p className="text-lg text-gray-500">🔄 Carregando...</p>
                        </div>
                    </div>
                )
            )}
            {openAvatarMenu && <AvatarMenu/>}
        </div>
    );
}
